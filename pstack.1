.\" $FreeBSD$
.\" $Id: pstack.1,v 1.2 2007/02/28 00:36:13 peadar Exp $
.\"
.Dd Dec 8, 2004
.Dt PSTACK 1
.Os
.Sh NAME
.Nm pstack
.Nd get stack traces of threads in a running process
.Sh SYNOPSIS
.Nm
.Op Fl a Ar arg-count
.Op Fl e Ar executable-file
.Op Fl f Ar frame-count
.Op Fl o
.Op Fl O
.Op Fl t
.Op Fl v
.Ar pid | core
.Nm
.Op Fl s Ar snaplen
.Op Fl d Ar elf-file
.Sh DESCRIPTION
Displays the stack traces of each thread in the running process with process
id
.Ar pid
or from the core file
.Ar core
.Pp
Options are as follows:
.Bl -tag -width Fl
.It Fl a Ar arg-count
Attempt to read
.Ar arg-count
word-size arguments from the stack for each frame.
.It Fl f Ar frame-count
Do not attempt to read any more than
.Ar frame-count
stack frames for each stack.
.It Fl d
Causes
.Nm
to print a dump of the ELF information in an object file,
and exit.
.It Fl e Ar file
Specify an alternate executable to use for locating symbols in the
process.  This is useful if the process was started from a stripped
version of an executable, and you have the unstripped version
available. pstack may also have difficulty locating the executable
used to create a process, in which case this argument must be specified.
(see
.Sx BUGS
)
.It Fl o
For each stack frame, display the name of the object in which the current
function lies
.It Fl O
For each stack frame, display the full path to the object in which
the current function lies
.It Fl t
Display the amount of time that the process was suspended by
.Nm
.It Fl v
verbose. Display debugging and diagnostics.
.El
.Sh SEE ALSO
.Xr procfs 5
.Xr ptrace 2
.Sh BUGS
.Nm
works for x86 only.
.Pp
Because of a non-obvious interaction between wait(), ptrace() and
processes started with rfork(RFLINUXTHPN), there's some hackery
involved in detecting that the child process has been stopped
successfully by
.Nm
Adding "-DMISC_39201_FIXED" to CFLAGS when compiling
.Nm
removes the associated hackery.
.Pp
The automatic detection of the file from which a process was created is ad hoc at best. For running processes,
it requires 
.Xr procfs 5
to be mounted on "/proc", which itself only provides a best-effort
facility for locating executables.  Core file support is limited
by the content of the process state information in the core, which
generally does not contain a full path.
.Sh AUTHORS
Peter Edwards <peadar@freebsd.org>
